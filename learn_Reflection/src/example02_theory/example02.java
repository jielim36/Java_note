package example02_theory;
/*
Java Reflection 反射机制

基本介绍：反射机制允许程序在执行期间借助与Reflection API取得任何类的内部信息（比如成员变量，构造器，成员方法等等）
        并能操作对象的属性及方法。反射在设计模式和框架底层都会用到

基本原理：加载完类之后，在堆中就产生了一个Class类型的对象（注意：不是.class文件）
        这个Class对象包含了类的完整结构信息。通过这个对象得到类的结构。这个对象就像一面镜子
        透过这个镜子看到类的结构，所以就非常形象的称作：反射Reflection

        比喻：P对象 -> Person类
            cls对象-> Class类 （这个Class类实际上就是一个类名，只是取的比较奇怪，类似于：人的名字叫"名字"）


详细：看这个learn_Reflection的文件夹里有一个img.png的图片：反射原理图

反射机制可以完成：
1.在运行时判断任意一个对象所属的类
2.在运行时构造任意一个类的对象
3.在运行时得到任意一个类所具有的成员变量和方法
4.在运行时调用任意一个对象的成员变量和方法
5.生成动态代理


反射优点和缺点
1.优点：可以动态的创建和使用对象（也是框架底层核心），使用灵活，没有反射机制，框架技术就失去底层支撑
2.缺点：使用反射基本是解释执行，堆执行速度有影响
 */
public class example02 {
}
